<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:component-scan base-package="com.capgemini.user.web.rest" />
	
	<bean id="responseEntityUserExceptionHandler" class="com.capgemini.user.exception.core.ResponseEntityUserExceptionHandler" />
	
	<!-- <context:component-scan base-package="com.capgemini.user.exception.core">
		<context:include-filter type="assignable" expression="com.capgemini.user.exception.core.ResponseEntityUserExceptionHandler"/>
	</context:component-scan> -->
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- registering the BeanPostProcessor, registers AnnotationMethodHandlerAdapter & DefaultAnnotationHandlerMapping  beans, 
	 take a look at AnnotationDrivenBeanDefinitionParser.java what it does  -->	
	<!-- does nothing very much  -->
	<mvc:annotation-driven enable-matrix-variables="true">
		<mvc:message-converters>
	        <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
	        <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"/>
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
    	</mvc:message-converters>
	</mvc:annotation-driven>
	
</beans>